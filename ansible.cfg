[defaults]
# (list) List of enabled callbacks, not all callbacks need enabling, but many of those shipped with Ansible do as we don't want them activated by default.
callbacks_enabled= timer, profile_tasks

# (pathspec) Colon separated paths in which Ansible will search for Action Plugins.
action_plugins=~/.ansible/plugins/action:/usr/share/ansible/plugins/action

# (boolean) This controls whether an Ansible playbook should prompt for a vault password.
;ask_vault_pass=False

# (pathspec) Colon separated paths in which Ansible will search for Callback Plugins.
callback_plugins=~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback

# (integer) Maximum number of forks Ansible will use to execute tasks on target hosts.
forks=5

# (pathlist) Comma separated list of Ansible inventory sources
inventory=./inventory

# (string) Sets the login user for the target machines
# When blank it uses the connection plugin's default, normally the user currently executing Ansible.
#remote_user= admin

# (string) Set the main callback used to display Ansible output, you can only have one at a time.
# You can have many other callbacks, but just one can be in charge of stdout.
;stdout_callback=default

# (boolean) Toggle the use of "su" for tasks.
;su=False

# (string) Path to the Python interpreter to be used for module execution on remote targets, or an automatic discovery mode. Supported discovery modes are ``auto`` (the default), ``auto_silent``, ``auto_legacy``, and ``auto_legacy_silent``. All discovery modes employ a lookup table to use the included system Python (on distributions known to include one), falling back to a fixed ordered list of well-known Python interpreter locations if a platform-specific default is not available. The fallback behavior will issue a warning that the interpreter should be set explicitly (since interpreters installed later may change which one is used). This warning behavior can be disabled by setting ``auto_silent`` or ``auto_legacy_silent``. The value of ``auto_legacy`` provides all the same behavior, but for backwards-compatibility with older Ansible releases that always defaulted to ``/usr/bin/python``, will use that interpreter if present.
#interpreter_python=/usr/bin/python3

[privilege_escalation]
# (boolean) Display an agnostic become prompt instead of displaying a prompt containing the command line supplied become method
;agnostic_become_prompt=True

# (boolean) This setting controls if become is skipped when remote user and become user are the same. I.E root sudo to root.
# If executable, it will be run and the resulting stdout will be used as the password.
;become_allow_same_user=False

# (boolean) Toggles the use of privilege escalation, allowing you to 'become' another user after login.
;become=False

# (boolean) Toggle to prompt for privilege escalation password.
become_ask_pass=True

# (string) Privilege escalation method to use when `become` is enabled.
become_method=sudo

# (string) The user your login/remote user 'becomes' when using privilege escalation, most systems will use 'root' when no user is specified.
;become_user=root


[connection]
# (boolean) Pipelining, if supported by the connection plugin, reduces the number of network operations required to execute a module on the remote server, by executing many Ansible modules without actual file transfer.
# This can result in a very significant performance improvement when enabled.
# However this conflicts with privilege escalation (become). For example, when using 'sudo:' operations you must first disable 'requiretty' in /etc/sudoers on all managed hosts, which is why it is disabled by default.
# This option is disabled if ``ANSIBLE_KEEP_REMOTE_FILES`` is enabled.
# This is a global option, each connection plugin can override either by having more specific options or not supporting pipelining at all.
pipelining=True
